name: Release (and deploy) plugin package

# Deploy when a new release is created in the Main branch
on:
  release:
    # Only deploy when the admin publishes/pre-releases from GitHub
    types: [published]

jobs:
  plugin_tests:
    strategy:
      matrix:
        php_version: [ '7.3', '7.4', '8.0' ]
    name: "Plugin tests - PHP"
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: eighty20results/Utilities
          ref: main

      # Extract the branch name for all events except for pull requests
      - name: Extract branch or tag name
        id: branch-name
        uses: tj-actions/branch-names@v5.1

      - name: Setup PHP with Composer V2+
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php_version }}
          extensions: mbstring, xdebug
          tools: composer:v2
          coverage: pcov

      - name: Login to Docker HUB
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.CONTAINER_ACCESS_TOKEN }}

      - name: Load cached Composer and test related dependencies
        uses: actions/cache@v2
        id: composer-cache
        with:
          key: ${{ runner.os }}-composer-cache-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-cache
          path: inc/**

      - name: Install all needed dependencies for Composer
        shell: bash
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: make composer-dev
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Install all needed WordPress plugin dependencies
        shell: bash
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: make wp-deps
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Install all needed dependencies for Docker
        shell: bash
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: make docker-deps
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Run all Standard Tests
        shell: bash
        run: make tests
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities
          GITHUB_TOKEN: ${{ secrets.GITHUB }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          CONTAINER_ACCESS_TOKEN: ${{ secrets.CONTAINER_ACCESS_TOKEN }}

  # To create the plugin .zip archive
  build_plugin:
    name: Build plugin package to the plugin repository (Our License server or WordPress.org)
    needs: [plugin_tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: eighty20results/Utilities
          ref: main

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Adding deployment target to known_hosts file
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: "Setup PHP with Composer V2+"
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, xdebug
          tools: composer:v2
          coverage: pcov

      - name: Login to Docker HUB
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.CONTAINER_ACCESS_TOKEN }}

      - name: Load cached Composer and test related dependencies
        uses: actions/cache@v2
        id: composer-cache
        with:
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-cache
          path: inc/

      - name: Install all needed dependencies for Composer
        shell: bash
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: make composer-dev
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Install all needed WordPress plugin dependencies
        shell: bash
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: make wp-deps
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Install all needed dependencies for Docker
        shell: bash
        if: steps.composer-cache.outputs.cache-hit != 'true'
        run: make docker-deps
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Cache the built plugin package
        uses: actions/cache@v2
        id: plugin-package-cache
        with:
          key: ${{ runner.os }}-plugin-package-cache-${{ hashFiles('**/build/kits/**.zip') }}
          restore-keys: ${{ runner.os }}-plugin-package-cache
          path: build/kits/**.zip

      - name: Build and test plugin before deployment
        shell: bash
        run: make build
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities
          GITHUB_TOKEN: ${{ secrets.GITHUB }}
          CONTAINER_ACCESS_TOKEN: ${{ secrets.CONTAINER_ACCESS_TOKEN }}

  # To push the release to the plugin store
  release:
    name: Deploy plugin package to the plugin repository (Our License server or WordPress.org)
    needs: [plugin_tests, build_plugin]
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: eighty20results/Utilities
          ref: main

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Adding deployment target to known_hosts file
        shell: bash
        run: ssh-keyscan -H -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Login to Docker HUB
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.CONTAINER_ACCESS_TOKEN }}

      - name: Setup PHP with Composer V2+
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, xdebug
          tools: composer:v2
          coverage: pcov

      - name: Load cached Composer and test related dependencies (Production)
        uses: actions/cache@v2
        id: composer-cache-prod
        with:
          key: ${{ runner.os }}-composer-cache-prod-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-cache-prod
          path: inc/

      - name: Install all needed dependencies for Composer
        if: steps.composer-cache-prod.outputs.cache-hit != 'true'
        shell: bash
        run: make composer-dev
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Install all needed WordPress plugin dependencies
        if: steps.composer-cache-prod.outputs.cache-hit != 'true'
        shell: bash
        run: make wp-deps
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Install all needed dependencies for Docker
        if: steps.composer-cache-prod.outputs.cache-hit != 'true'
        shell: bash
        run: make docker-deps
        env:
          E20R_PLUGIN_NAME: 00-e20r-utilities

      - name: Restore the built plugin package
        id: plugin-package-cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-plugin-package-cache-${{ hashFiles('**/build/kits/**.zip') }}
          restore-keys: ${{ runner.os }}-plugin-package-cache
          path: build/kits/**.zip

      # Extract the branch name for all events except for pull requests
      - name: Decide whether to run deploy action
        id: branch-name
        uses: tj-actions/branch-names@v5.1

      - name: Show me the branch
        shell: bash
        run: |
          echo "Reference branch is: ${{ steps.branch-name.outputs.ref_branch }}"
          echo "Current branch is: ${{ steps.branch-name.outputs.current_branch }}"
          echo "Tag is: ${{ steps.branch-name.outputs.tag }}"
          echo "Tag state is: '${{ steps.branch-name.outputs.is_tag }}'"

      # And then deploy the package if it exists _and_ we're on the main branch with a release tag

      - name: Deploy plugin when building a release (to WooCommerce Store or Wordpress.org repo)
        if: steps.branch-name.outputs.is_tag && startsWith(steps.branch-name.outputs.tag, 'release-')
        shell: bash
        run: make deploy
        # The deployment target will depend on whether the
        # E20R_SSH_USER or SVN_USERNAME environment variable is defined
        env:
          BRANCH_NAME: ${{ steps.branch-name.outputs.tag }}
          E20R_PLUGIN_NAME: 00-e20r-utilities
          GITHUB_TOKEN: ${{ secrets.GITHUB }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          CONTAINER_ACCESS_TOKEN: ${{ secrets.CONTAINER_ACCESS_TOKEN }}
          E20R_SSH_SERVER: ${{ secrets.SSH_HOST }}
          E20R_SSH_USER: ${{ secrets.SSH_USER }}
          E20R_SSH_PORT: ${{ secrets.SSH_PORT }}
